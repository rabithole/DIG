<div class="main-title">
	<h1>{{ section.settings.title }}</h1>
</div>

<div class='top-bottom'>
	{{ section.settings.top-of-page }}
</div>

<!-- Top of kit page -->
<div class="kit">
	<h4 class="kitTotal"></h4>

	<!-- outside for loop -->
  	{% for block in section.blocks %}

	  	{% capture variants %}
			{{ block.settings.productOne }}
			{{ block.settings.productTwo }}
			{{ block.settings.productThree }}
			{{ block.settings.productFour }}
			{{ block.settings.productFive }}
			{{ block.settings.productSix }}
		{% endcapture %}

		{% assign variantsArray = variants | split: ' ' %}

	  		{% assign sku = block.settings.productOne %}
	  		{% assign product = block.settings.product %}

	  		<!-- CANNOT CHANGE HTML OR IT WILL BREAK THE JAVASCRIPT -->
			<div class="product-container" id="{{ product.handle }}">


			  	<section class="title-description">
			  		<h2 class="prod-title">{{ block.settings.title }}</h2>
			  		<p>{{ block.settings.description | truncate: 352 }}</p>
			  	</section>

			  	<section class="eachProduct">
				  	{% for option in product.variants %}
		          		{% if option.sku == sku %}
		      				{% if product.has_only_default_variant %}
		      					<img src='{{ block.settings.image | img_url }}' style='width: 200px;' class="product-image">
							{% else %}
								<img class="product-image" src='{{ option.image | img_url }}'> 
							{% endif %}

		            		<h3 class='product-price' id='{{ option.id }}' data-price={{ option.price }}>{{ option.price | money }}</h3>
		    				
							<div class="dropDown">
								<label for='variants'>Choose an Option</label>
								<select name="variants" class="variants-selector">
									{% for sku in variantsArray %}
										{% for title in product.variants %}
											{% if title.sku == sku %}
												<option value={{ sku }}>{{ title.title }}</option>
											{% endif %}
										{% endfor %}
									{% endfor %}
								</select>
							</div>
						{% endif %}
				  	{% endfor %}
				</section> 
			</div>
  {% endfor %}
  <!-- end of outside for loop -->

  <div class='cart-button'>
      <button class="discount-page-button" >Add To Cart</button> 
  </div>

</div>
<!-- bottom of kit section -->

<div class='top-bottom' >
	{{ section.settings.bottom-of-page }}
</div>	

<script>
	// Setting id for each kit product section
    var kitContainers = document.getElementsByClassName('kit'); // used to set dynamic kit id

	// Updates kit section total on variant change
    var setKitTotal = function(kitTotalPrice, kitProductTotals) {
    	var priceArray = [];

    	// Array.from converts an HTMLCollection to an array. 
    	Array.from(kitProductTotals).forEach(function(price) {
				priceArray.push(Number(price.dataset.price))	
			})

		var sum = priceArray.reduce(function (x,y){
			    return x + y;
			}, 0)

		kitTotalPrice.innerHTML = 'Total: ' + '$' + (sum / 100).toFixed(2);
    }

    // Intializes kit pricing on first load. Also sets element id's as neccessary. 
    var initializeKit = function(kitContainer, kitIndex) {
    	if(kitContainer.id) return;

    	kitContainer.id = kitIndex;
    	var kitTotal = kitContainer.getElementsByTagName('h4'); // where total kit price will display
    	var productTotals = kitContainer.getElementsByTagName('h3'); // prices per product
    	var kitTotalId = kitTotal[0].id = 50 + kitIndex;
    	
    	setKitTotal(kitTotal[0], productTotals)
    }

    // Sets a unique id for each kit on the page.
    for(var i = 0; i < kitContainers.length; i++){
        initializeKit(kitContainers[i], i)
    }

	// Grabs sku from drop down menu for selecting 
	var changeProduct = function(event) {
		var productHandle = event.target.closest('.product-container').id;
		var productImg = event.target.parentElement.parentElement.children[0];
		var productPriceElement = event.target.parentElement.parentElement.children[1];
		var sku = Number(event.target.value);
		var kitTotalPrice = event.target.closest('.kit').children[0];
		var kitProductTotals = event.target.closest('.kit').querySelectorAll('H3')

		getProductVariant(productHandle, sku)
			.then(variant => {
				// Product variant image
				productImg.src = variant.featured_image.src;

				// Product variant price
				productPriceElement.innerHTML = new Intl.NumberFormat('en-IN', {
					style: 'currency',
					currency: 'USD',
					maxiumumFractionDigits: -2
				}).format((variant.price /100).toFixed(2))

				productPriceElement.dataset.price = variant.price;
				productPriceElement.id = variant.id;

				setKitTotal(kitTotalPrice, kitProductTotals)
			})
		}

	// Accessing store front api when changing product variant from select option list. 
	var getProductVariant = function(productHandle, sku) {
		return fetch(window.Shopify.routes.root + `products/${productHandle}.js`, {})
		.then((res) => {
			return res.json().then(data => {
				var variant = data.variants.find(objSku => {
					return objSku.sku == sku;
				});
				return variant;
			})
		})
	}

	// Add to cart
	var addToCart = function(e) {
		var products = this.parentElement.querySelectorAll('H3.product-price')
		var productsData = [];

		products.forEach( function(product) {
		    productsData.push({
		        quantity: 1,
		        id: product.id
		    })
		})

		var data = {
		    items: productsData
		}
	
		fetch('/cart/add.js', {
		    body: JSON.stringify(data),
		    credentials: 'same-origin',
		    headers: {
		        'Content-Type': 'application/json'
		    },
		    method: 'POST'
		}).then((response) => {
		    response.json();
		    window.location.reload();
		    // document.documentElement.dispatchEvent(
		    // 	new CustomEvent('cart:refresh', { bubbles: true })
		    // );
		}).then(data => {
		    console.log("Success", data)
		}).catch((err) => {
		    console.error(err)
		});
	}

	window.addEventListener('load', function(e) {
	    Array.prototype.forEach.call(
	        document.getElementsByClassName('cart-button'), function(element) {
	            element.addEventListener('click', addToCart)
	        }
	    );

	    Array.prototype.forEach.call(
	        document.getElementsByClassName('variants-selector'), function(element) {
	            element.addEventListener('change', changeProduct)
	        }
	    );
	});
</script>

{% schema %}
	{
		"name": "Build A Kit",
		"tag": "div",
		"settings": [
			{	
				"id": "title",
				"type": "text",
				"label": "Kit Title"
			},
			{
				"type": "html",
				"label": "Kit details",
				"id": "top-of-page"
			},
			{
				"type": "html",
				"label": "More info",
				"id": "bottom-of-page"
			},
			{
				"type": "link_list",
				"id": "other-kits",
				"label": "Links to other kits"
			}
		],
		"blocks": [
			{
			"type": "text",
			"name": "product",
  			"settings": [
				{	
					"id": "title",
					"type": "text",
					"label": "Product Title"
				},
				{
					"type": "text",
					"id": "productOne",
					"label": "First Option"
				},
				{
					"type": "text",
					"id": "productTwo",
					"label": "Second Option"
				},
				{
					"type": "text",
					"id": "productThree",
					"label": "Third Option"
				},
				{
					"type": "text",
					"id": "productFour",
					"label": "Fourth Option"
				},
				{
					"type": "text",
					"id": "productFive",
					"label": "Fifth Option"
				},
				{
					"type": "text",
					"id": "productSix",
					"label": "Sixth Option"
				},
				{
					"type": "product",
					"id": "product",
					"label": "Product"
				},
				{
					"id": "description",
					"type": "text",
					"label": "Product Description",
					"info": "Limit 350 charancters"
				},
				{
      				"type": "image_picker",
      				"id": "image",
      				"label": "Use when there is only one variant for a product!",
      				"info": "1200 x 800px .jpg recommended"
    			}
  					]
				}
		],
		"presets": [
			{
				"category": "Product",
				"name": "Build A Kit",
				"settings": {}
			}
		]
	}
{% endschema %}

{% javascript %}
		



		
{% endjavascript %}




